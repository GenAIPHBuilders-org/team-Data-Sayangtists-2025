# Generated by Django 5.2.1 on 2025-05-24
from django.db import migrations
from django.conf import settings
from django.contrib.auth.hashers import make_password

DEBUG_USERNAME = 'sayangtist'

def create_debug_user(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    db_alias = schema_editor.connection.alias

    if settings.DEBUG:
        user, created = User.objects.using(db_alias).get_or_create(
            username=DEBUG_USERNAME,
            defaults={
                'email': f'{DEBUG_USERNAME}@example.com',
                'password': make_password(None),
                'is_staff': False,
                'is_superuser': False,
                'first_name': 'Debug',
                'last_name': 'User',
            }
        )
        if created:
            print(f"\nSuccessfully created debug user: {DEBUG_USERNAME} with an unusable password.")
        else:
            if user.has_usable_password():
                user.password = make_password(None)
                user.save(using=db_alias)
                print(f"\nDebug user {DEBUG_USERNAME} already existed. Ensured password is set to unusable.")
            else:
                print(f"\nDebug user {DEBUG_USERNAME} already exists with an unusable password.")

def remove_debug_user(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    db_alias = schema_editor.connection.alias

    if settings.DEBUG:
        try:
            user_to_delete = User.objects.using(db_alias).get(username=DEBUG_USERNAME)
            if user_to_delete.email == f'{DEBUG_USERNAME}@example.com' or not user_to_delete.has_usable_password():
                user_to_delete.delete()
                print(f"\nSuccessfully removed debug user: {DEBUG_USERNAME}")
            else:
                print(f"\nDebug user {DEBUG_USERNAME} found, but not removed due to safety checks (e.g., email mismatch or has usable password).")
        except User.DoesNotExist:
            print(f"\nDebug user {DEBUG_USERNAME} not found, nothing to remove.")
        except Exception as e:
            print(f"\nError removing debug user {DEBUG_USERNAME}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('entries', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(create_debug_user, remove_debug_user),
    ]